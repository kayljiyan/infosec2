@page "/password/{UserEmail?}"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject NavigationManager NM
@using Newtonsoft.Json
@using client.Schemas
@using System.Text
@using System.Net.Http

<title>Password Recovery</title>

<style>
    img {
        border-radius: 50%;
    }

    .custom-btn:hover {
        background-color: white;
        color: green;
    }

    .bg-image {
        position: relative;
        background-image: url('images/greenbg.png');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        height: 100vh;
    }

        .bg-image::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .bg-image .container {
            position: relative;
            z-index: 2;
        }

</style>

<section class="bg-image py-3 py-md-5 full-height">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5 col-xxl-4">
                <div class="card border border-light-subtle rounded-3 shadow-sm">
                    <div class="card-body p-3 p-md-4 p-xl-5">
                        <div class="text-center mb-3">
                            <a href="/">
                                <img src="images/greencross.jpg" alt="Forgot Logo" width="150" height="150">
                            </a>
                        </div>
                        <h2 class="fs-6 fw-bold text-center text-secondary mb-4">Welcome! @UserEmail</h2>
                        <div class="row gy-2 overflow-hidden">
                            <form>
                                <div class="form-group">
                                    <label>New Password</label>
                                    <input type="email" class="form-control mb-3" placeholder="Enter your new password..." @bind="new_password">
                                </div>
                                <div class="form-group">
                                    <label>Confirm Password</label>
                                    <input type="email" class="form-control mb-3" placeholder="Confirm your password..." @bind="confirm_password">
                                </div>
                            </form>
                            <div class="col-12">
                                <div class="d-grid my-3">
                                    <a class="btn btn-success rounded-pill custom-btn mb-3" @onclick="() => ChangePassword(new_password, confirm_password)">Change Password</a>
                                    <a href="/login" class="text-success text-center">Return to login</a>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code
{
    [Parameter]
    public string? UserEmail { get; set; }
    public string? new_password { get; set; }
    public string? confirm_password { get; set; }
    protected override void OnParametersSet()
    {
        UserEmail = UserEmail ?? "no email";
    }
    public class EmailToken
    {
        public string? token { get; set; }
    }
    public async Task<EmailToken> GetEmailToken()
    {
        var token = await JS.InvokeAsync<EmailToken>("getemailtoken");
        return token;
    }
    public async Task ChangePassword(string new_password, string confirm_password)
    {
        using (var http = new HttpClient())
        {
            if (!string.IsNullOrWhiteSpace(new_password) && !string.IsNullOrWhiteSpace(confirm_password))
            {
                if (new_password == confirm_password)
                {
                    var user = new Dictionary<string, string>{
                    { "user_email", UserEmail },
                    { "password", new_password}
                };
                var email_token = await GetEmailToken();
                var user_param = JsonConvert.SerializeObject(user);
                HttpContent postparams = new StringContent(user_param, Encoding.UTF8, "application/json");
                http.DefaultRequestHeaders.Add("Authorization", $"Bearer {email_token.token}");
                var response = await http.PutAsync("http://127.0.0.1:8000/api/v1/password", postparams);
                var responsebody = await response.Content.ReadAsStringAsync();
                try
                {
                    response.EnsureSuccessStatusCode();
                    var detail = JsonConvert.DeserializeObject<Detail>(responsebody);
                    Console.WriteLine(detail.detail);
                    NM.NavigateTo("login");
                } catch (Exception e) {
                    var detail = JsonConvert.DeserializeObject<Detail>(responsebody);
                    Console.WriteLine(detail.detail);
                }
                } else {
                    Console.WriteLine("password don't match");
                }
                
            } else {
                Console.WriteLine("missing credentials");
            }
        }
    }
}
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject NavigationManager NM
@inject ProtectedLocalStorage ProtectedLocalStore
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json
@using client.Schemas
@using System.Text
@using System.Net.Http

<title>Profile</title>

<style>
    .custom-btn:hover {
        background-color: green;
        color: white;
    }

    .logout-btn:hover {
        background-color: white;
        color: red;
    }

    .request-btn:hover {
        background-color: white;
        color: blue;
    }

    hr {
        border-top: 1px solid white;
    }

    .navbar-nav {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        align-items: center;
    }

        .navbar-nav .nav-item {
            margin-right: 20px;
        }

        .navbar-nav .link-btn {
            text-decoration: none;
            padding-bottom: 5px;
            position: relative;
            color: white;
            padding: 0.5rem 1rem;
        }

            .navbar-nav .link-btn::after {
                content: '';
                position: absolute;
                left: 0;
                bottom: 0;
                width: 100%;
                height: 2px;
                background-color: white;
                transform: scaleX(0);
                transform-origin: right;
                transition: transform 0.3s ease;
            }

            .navbar-nav .link-btn.active::after,
            .navbar-nav .link-btn:hover::after {
                transform: scaleX(1);
                transform-origin: left;
            }

</style>

<section class="container py-3 my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h3 class="card-title fw-bold mb-0">Profile</h3>
                    <a class="btn btn-primary rounded-pill fw-bold request-btn" role="button" @onclick="() => ChangePassword(user_email)">Change Password</a>
                </div>
                <hr class="mt-2" />
                <div class="card-body bg-success text-light">
                    <div class="row align-items-start">
                        <div class="col border border-light text-center">
                            UUID
                        </div>
                        @* <div class="col border border-light text-center">
                            Email
                        </div> *@
                        <div class="col border border-light text-center">
                            Name
                        </div>
                        <div class="col border border-light text-center">
                            Role
                        </div>
                    </div>
                    <div class="row align-items-center bg-light text-dark">
                        <div class="col">
                            @user_uuid
                        </div>
                        @* <div class="col text-center">
                            @user_email
                        </div> *@
                        <div class="col text-center">
                            @user_name
                        </div>
                        <div class="col text-center">
                            @user_role
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code
{
    [Parameter]
    public string? user_uuid { get; set; }
    [Parameter]
    public string? user_name { get; set; }
    [Parameter]
    public string? user_email { get; set; }
    [Parameter]
    public string? user_role { get; set; }
    public async Task SetEmailToken(string token)
    {
        await JS.InvokeVoidAsync("setemailtoken", token);
    }
    public async Task ChangePassword(string user_email)
    {
        using (var http = new HttpClient())
        {
            if (!string.IsNullOrWhiteSpace(user_email))
            {
                var uri = $"http://127.0.0.1:8000/api/v1/password/{user_email}";
                var response = await http.GetAsync(uri.ToString());
                var responsebody = await response.Content.ReadAsStringAsync();
                try
                {
                    response.EnsureSuccessStatusCode();
                    var detail = JsonConvert.DeserializeObject<Recovery>(responsebody);
                    Console.WriteLine(detail.detail);
                    await SetEmailToken(detail.token);
                } catch (Exception e) {
                    var detail = JsonConvert.DeserializeObject<Detail>(responsebody);
                    Console.WriteLine(detail.detail);
                }
            } else {
                Console.WriteLine("missing credentials");
            }
        }
    }
}
@page "/create/appointment/{request_uuid}"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject NavigationManager NM
@using Newtonsoft.Json
@using client.Schemas
@using System.Text
@using System.Net.Http

<title>Appointment Creation</title>

<style>
    .request-btn:hover {
        background-color: white;
        color: blue;
    }

    hr {
        border-top: 1px solid white;
    }

    .navbar-nav {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        align-items: center;
    }

        .navbar-nav .nav-item {
            margin-right: 20px;
        }

        .navbar-nav .link-btn {
            text-decoration: none;
            padding-bottom: 5px;
            position: relative;
            color: white;
            padding: 0.5rem 1rem;
        }

            .navbar-nav .link-btn::after {
                content: '';
                position: absolute;
                left: 0;
                bottom: 0;
                width: 100%;
                height: 2px;
                background-color: white;
                transform: scaleX(0);
                transform-origin: right;
                transition: transform 0.3s ease;
            }

            .navbar-nav .link-btn:hover::after {
                transform: scaleX(1);
                transform-origin: left;
            }

</style>

<nav class="navbar navbar-expand-lg navbar-light bg-primary fixed-top">
    <div class="container-fluid">
        <a class="navbar-brand mb-0 h1 text-light fw-bolder">CREATION</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="link-btn text-light ms-2 fw-bold" href="/dashboard" role="button">Return to Dashboard</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<section class="container py-3 my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                    <h3 class="card-title fw-bold mb-0">Appointment Creation</h3>
                    <a class="btn btn-primary rounded-pill fw-bold request-btn" role="button" @onclick="() => CreateAppointment(request_uuid, request_status, appointment_remarks)">Submit Appointment</a>
                </div>
                </div>
                <hr class="mt-2" />
                <div class="card-body bg-info text-light">
                    <div class="form-group">
                        <label for="field1">Request UUID</label>
                        <input type="text" class="form-control" id="field1" placeholder=@request_uuid readonly>
                    </div>
                    <div class="form-group">
                        <label for="field2">Appointment Remarks</label>
                        <textarea type="text" class="form-control" id="field2" rows="8" placeholder="Enter doctor name and appointment date" @bind="appointment_remarks"/>
                    </div>
                    <div class="form-group">
                        <label for="field3">Request Status</label>
                        <input type="text" class="form-control" id="field3" placeholder="Enter request status" @bind="request_status">
                    </div>
                </div>
            </div>
        </div>
</section>

@code
{
    [Parameter]
    public string? request_uuid { get; set; }
    public string? request_status { get; set; }
    public string? user_token { get; set; }
    public string? appointment_remarks { get; set; }
    protected override void OnParametersSet()
    {
        request_uuid = request_uuid ?? "no uuid";
    }
    public class UserToken
    {
        public string? token { get; set; }
    }
    public async Task<UserToken> GetUserToken()
    {
        var token = await JS.InvokeAsync<UserToken>("getusertoken");
        return token;
    }
    public async Task CreateAppointment(string request_uuid, string request_status, string appointment_remarks)
    {
        var result = await GetUserToken();
        user_token = result.token;
        using (var http = new HttpClient())
        {
            var appointment = new Dictionary<string, string>{
                { "request_uuid", request_uuid },
                { "appointment_remarks", appointment_remarks },
                { "request_status", request_status }
            };
            var AppointmentJSON = JsonConvert.SerializeObject(appointment);
            http.DefaultRequestHeaders.Add("Authorization", $"Bearer {user_token}");
            HttpContent postparams = new StringContent(AppointmentJSON, Encoding.UTF8, "application/json");
            var response = await http.PostAsync("http://127.0.0.1:8000/api/v1/appointment", postparams);
            var responsebody = await response.Content.ReadAsStringAsync();
            try
            {
                response.EnsureSuccessStatusCode();
                var detail = JsonConvert.DeserializeObject<Detail>(responsebody);
                Console.WriteLine(detail.detail);
                NM.NavigateTo("dashboard");
            } catch (Exception e) {
                var detail = JsonConvert.DeserializeObject<Detail>(responsebody);
                Console.WriteLine(detail.detail);
            }
        }
    }
}
@page "/dashboard"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject NavigationManager NM
@inject ProtectedLocalStorage ProtectedLocalStore
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json
@using client.Schemas
@using System.Text
@using System.Net.Http

<title>Dashboard</title>

<style>
    .custom-btn:hover {
        background-color: green;
        color: white;
    }

    .logout-btn:hover {
        background-color: white;
        color: red;
    }

    .request-btn:hover {
        background-color: white;
        color: blue;
    }

    hr {
        border-top: 1px solid white;
    }

    .navbar-nav {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        align-items: center;
    }

        .navbar-nav .nav-item {
            margin-right: 20px;
        }

        .navbar-nav .link-btn {
            text-decoration: none;
            padding-bottom: 5px;
            position: relative;
            color: white;
            padding: 0.5rem 1rem;
        }

            .navbar-nav .link-btn::after {
                content: '';
                position: absolute;
                left: 0;
                bottom: 0;
                width: 100%;
                height: 2px;
                background-color: white;
                transform: scaleX(0);
                transform-origin: right;
                transition: transform 0.3s ease;
            }

            .navbar-nav .link-btn.active::after,
            .navbar-nav .link-btn:hover::after {
                transform: scaleX(1);
                transform-origin: left;
            }



</style>



<nav class="navbar navbar-expand-lg navbar-light bg-success fixed-top">
    <div class="container-fluid">
        <a class="navbar-brand mb-0 h1 text-light fw-bolder">WELCOME @user_name</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="link-btn text-light ms-2 fw-bold" role="button" @onclick='() => ChangeScreen("requests")'>Requests</a>
                </li>
                <li class="nav-item">
                    <a class="link-btn text-light ms-2 fw-bold" role="button" @onclick='() => ChangeScreen("appointments")'>Appointments</a>
                </li>
                <li class="nav-item">
                    <a class="link-btn text-light ms-2 fw-bold" role="button" @onclick='() => ChangeScreen("records")'>Records</a>
                </li>
                <li class="nav-item">
                    <a class="link-btn text-light ms-2 fw-bold" role="button" @onclick='() => ChangeScreen("profile")'>Profile</a>
                </li>
                <li class="nav-item">
                    <a class="btn btn-danger rounded-pill ms-2 fw-bold logout-btn" href="/" role="button">Logout</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

@switch (current_screen)
{
    case "profile":
        <Profile user_uuid=@user_uuid user_email=@user_email user_name=@user_name user_role=@user_role/>
        break;
    case "requests":
        <Request user_uuid=@user_uuid user_role=@user_role/>
        break;
    case "appointments":
        <Appointment />
        break;
    case "records":
        <Record />
        break;
    default:
        <p>Do Nothing</p>
        break;
}

@code
{
    public string? user_token { get; set; }
    public string? user_uuid { get; set; }
    public string? user_name { get; set; }
    public string? user_email { get; set; }
    public string? user_role { get; set; }
    public string? current_screen { get; set; } = "profile";
    public class UserToken
    {
        public string? token { get; set; }
    }
    public async Task<UserToken> GetUserToken()
    {
        var token = await JS.InvokeAsync<UserToken>("getusertoken");
        return token;
    }
    protected override async Task OnInitializedAsync()
    {
        var result = await GetUserToken();
        user_token = result.token;
        Dictionary<String, String> user_deets = await GetUserDetails(user_token);
        if (user_deets != null) {
            user_email = user_deets["user_email"];
            user_uuid = user_deets["user_uuid"];
            user_name = user_deets["user_name"];
            user_role = user_deets["user_role"];
        }
    }
    public class UserData
    {
        public Dictionary<String, String> data { get; set; }
    }
    public async Task<Dictionary<String, String>> GetUserDetails(string token)
    {
        using (var http = new HttpClient())
        {
            http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");
            var response = await http.GetAsync("http://127.0.0.1:8000/api/v1/deserialize");
            var responsebody = await response.Content.ReadAsStringAsync();
            try
            {
                response.EnsureSuccessStatusCode();
                var detail = JsonConvert.DeserializeObject<UserData>(responsebody);
                return detail.data;
            } catch (Exception e) {
                NM.NavigateTo("login");
                return null;
            }
        }
    }
    public void ChangeScreen(string screen)
    {
        current_screen = screen;
    }
}